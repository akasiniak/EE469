module alu (A, B, cntrl, result, negative, zero, overflow, carry_out);
	input logic [63:0] A, B;
	input logic [2:0] cntrl;
	output logic [63:0] result;
	output logic negative, zero, overflow, carry_out;
	logic negSelectMux;
	logic xor_out, and_out, or_out;
	logic [63:0] adder_out, carryLogic;
	logic [63:0][7:0] muxLogic;
	
	genvar i, j;
	generate
		for(i = 1; i < 64; i++) begin: eachAdder
			full_adder fullAdd(.out(adder_out[i]), .Cout(carryLogic[i]), .A(A[i]), .B(negSelectMux[i]), .Cin(carryLogic[i-1]));
		end
		for(j = 0; j < 64; j++) begin: each8Mux
			mux8to1 mux8(.out(result[j]), .select(cntrl[2:0]), .muxIn(muxLogic[j][7:0]));
			mux2to1 mux2(.out(negSelectMux[j]), .in({B[j], (~B[j]})), .select(cntrl[0]));
			and andGate(muxLogic[j][4], A[j], B[j]);
			or 
		end
